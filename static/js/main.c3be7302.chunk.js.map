{"version":3,"sources":["routing/splash/figures/torus.js","routing/splash/splash.js","App.js","serviceWorker.js","index.js"],"names":["Torus","props","text","background","React","useState","b","setb","asciiframe","A","B","z","cA","Math","cos","sA","sin","cB","sB","k","NUM_LINES","LINE_LENGTH","j","ct","st","i","sp","cp","h","D","t","x","y","o","N","join","useEffect","params","setInterval","wrapper","style","fontFamily","backgroundColor","color","fontSize","width","theme","createMuiTheme","palette","primary","main","Splash","parentRef","useRef","window","innerWidth","height","innerHeight","dimensions","setDimensions","updateDimensions","addEventListener","removeEventListener","classes","makeStyles","App","overflow","overflowY","root","typography","button","padding","spacing","useClasses","className","ref","display","alignItems","minHeight","minWidth","justifyContent","flexDirection","Typography","variant","fontWeight","ThemeProvider","Button","path","Boolean","location","hostname","match","overrides","MuiCssBaseline","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMA0DeA,EAxDD,SAACC,GAAW,IACfC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,WADQ,EAEHC,IAAMC,SAAS,IAFZ,mBAEdC,EAFc,KAEXC,EAFW,KAWjBC,EAAa,SAAC,GAAY,IAAXC,EAAU,EAAVA,EAAGC,EAAO,EAAPA,EACdJ,EAAI,GACJK,EAAI,GACRF,GAAI,IACJC,GAAK,IAIL,IAHA,IAAIE,EAAKC,KAAKC,IAAIL,GAAIM,EAAKF,KAAKG,IAAIP,GAChCQ,EAAKJ,KAAKC,IAAIJ,GAAIQ,EAAKL,KAAKG,IAAIN,GAE3BS,EAAI,EAAGA,EAAIC,IAAuBD,IACvCb,EAAEa,GAAMA,EAXI,KAWiBE,GAAgB,KAAO,IACpDV,EAAEQ,GAAK,EAEX,IAAK,IAAIG,EAAI,EAAGA,EAAI,KAAMA,GAAK,IAE3B,IADA,IAAIC,EAAKV,KAAKC,IAAIQ,GAAIE,EAAKX,KAAKG,IAAIM,GAC3BG,EAAI,EAAGA,EAAI,KAAMA,GAAK,IAAM,CACjC,IAAIC,EAAKb,KAAKG,IAAIS,GAAIE,EAAKd,KAAKC,IAAIW,GAChCG,EAAIL,EAAK,EACTM,EAAI,GAAKH,EAAKE,EAAIb,EAAKS,EAAKZ,EAAK,GACjCkB,EAAIJ,EAAKE,EAAIhB,EAAKY,EAAKT,EAEvBgB,EAAI,EAAKV,KAAc,GAAKQ,GAAKF,EAAKC,EAAIX,EAAKa,EAAIZ,GACnDc,EAAI,EAAKZ,IAAY,GAAKS,GAAKF,EAAKC,EAAIV,EAAKY,EAAIb,GACjDgB,EAAIF,EAxBA,GAwBkBC,EACtBE,EAAI,EAAK,IAAMV,EAAKT,EAAKW,EAAKH,EAAKX,GAAMK,EAAKS,EAAKH,EAAKR,EAAKS,EAAKZ,EAAKe,EAAKJ,EAAKL,GACjFc,EAzBE,IAyBeA,GAAK,GAAKD,GAAK,GAAKA,EA1BjC,IA0BoDF,EAAIlB,EAAEsB,KAC9DtB,EAAEsB,GAAKJ,EACPvB,EAAE2B,GAAK,eAAeC,EAAI,EAAIA,EAAI,IAK9C,OADA3B,EAAKD,EAAE6B,KAAK,KACL,CAAC1B,IAAGC,MAKf,OAHAN,IAAMgC,WAAU,YAzCA,WACZ,IAAIC,EAAS,CAAC5B,EAAE,EAAGC,EAAE,GACrB4B,aAAY,WACRD,EAAO7B,EAAW6B,KACnB,IAsCHE,KACD,IACI,yBAAKC,MAAO,CACfC,WAAW,kCACXC,gBAAiBvC,EACjBwC,MAAOzC,EACP0C,SAAU,OACVC,MAAMxB,MACNf,I,wCC5CFwC,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAAS,CAELC,KAVS,cA2ENC,MAzDf,WACI,IAAMC,EAAYC,iBAAO,MADX,EAEsBjD,IAAMC,SAAS,CAACwC,MAAOS,OAAOC,WAAYC,OAAQF,OAAOG,cAF/E,mBAEPC,EAFO,KAEKC,EAFL,KAGRC,EAAmB,kBAAMD,EAAc,CAACH,OAAQF,OAAOG,YAAaZ,MAAOS,OAAOC,cACxFnB,qBAAU,WAEN,OADAkB,OAAOO,iBAAiB,SAAUD,GAC3B,kBAAMN,OAAOQ,oBAAoB,SAAUF,MACnD,IAEH,IAeMG,EAfaC,aAAW,SAAAlB,GAAK,MAAK,CACpCmB,IAAK,CACDpB,MAAO,OACPW,OAAQ,OACRU,SAAU,SACVC,UAAW,UAEfC,KAAK,2BACEtB,EAAMuB,WAAWC,QADpB,IAEA5B,gBAlCa,OAmCbC,MApCO,UAqCP4B,QAASzB,EAAM0B,QAAQ,QAIfC,GAMhB,OACI,yBAAKC,UAAWX,EAAQE,IAAKU,IAAKvB,GAC9B,yBAAKZ,MAAO,CACRoC,QAAS,OACTC,WAAY,SACZC,UAAWpB,EAAWF,OACtBuB,SAAUrB,EAAWb,MACrBH,gBArDS,OAsDTsC,eAAgB,WAEhB,yBAAKxC,MAAO,CAACoC,QAAS,OAAQK,cAAe,SAAUJ,WAAY,WAC/D,kBAACK,EAAA,EAAD,CAAYC,QAAS,KAAM3C,MAAO,CAC9B4C,WAAW,IACXzC,MA7DH,UA6DwB,yBAA0B,cAC/C,0BAA2B,cAH/B,sBAKA,kBAAC,EAAD,CAAOxC,WA9DF,OA8DgCD,KA/DtC,YAgEC,kBAACmF,EAAA,EAAD,CAAevC,MAAOA,GAClB,kBAACwC,EAAA,EAAD,CAAQH,QAAS,WAAYxC,MAAO,WAApC,oB,eCjDTsB,MAdf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOsB,KAAK,MACR,kBAAC,EAAD,UCFAC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2D,YCXA7C,EAAQC,YAAe,CACzB6C,UAAW,CACPC,eAAgB,CACZ,UAAW,CACP,IAAK,CACD,kBAAmB,OACnB,kBAAmB,oBAEvB,0BAA2B,CACvB,mBAAoB,MACpBhD,MAAO,QAKX,gCAAiC,CAC7B,mBAAoB,QAIxB,gCAAiC,CAC7B,mBAAoB,UACpB,gBAAiB,OACjB,OAAU,kBAId,iCAAkC,CAC9B+B,QAAS,aAQ7BkB,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,WAAD,KACI,kBAACX,EAAA,EAAD,CAAevC,MAAOA,GAClB,kBAACmD,EAAA,EAAD,MACA,kBAAC,EAAD,SAIZC,SAASC,eAAe,SD+EtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c3be7302.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Torus = (props) => {\r\n    const {text, background}=props\r\n    const [b, setb] = React.useState(\"\");\r\n    const wrapper = ()=>{\r\n        let params = {A:1, B:1};\r\n        setInterval(()=>{\r\n            params=asciiframe(params)\r\n        }, 50)\r\n    };\r\n    const LINE_LENGTH = 39;\r\n    const NUM_LINES = 19;\r\n    let asciiframe = ({A, B}) => {\r\n        let b = [];\r\n        let z = [];\r\n        A+= 0.07;\r\n        B += 0.03;\r\n        let cA = Math.cos(A), sA = Math.sin(A),\r\n            cB = Math.cos(B), sB = Math.sin(B);\r\n\r\n        for (let k = 0; k < NUM_LINES*LINE_LENGTH; k++) {\r\n            b[k] = (k % LINE_LENGTH) === LINE_LENGTH-1 ? \"\\n\" : \" \";//initialize with spaces and rows of size 80, 22 rows\r\n            z[k] = 0;\r\n        }\r\n        for (let j = 0; j < 6.28; j += 0.07) { // j <=> theta\r\n            let ct = Math.cos(j), st = Math.sin(j);\r\n            for (let i = 0; i < 6.28; i += 0.02) {   // i <=> phi\r\n                let sp = Math.sin(i), cp = Math.cos(i),\r\n                    h = ct + 2, // R1 + R2*cos(theta)\r\n                    D = 1 / (sp * h * sA + st * cA + 6), // this is 1/z, this modulates the display scaling\r\n                    t = sp * h * cA - st * sA; // this is a clever factoring of some of the terms in x' and y'\r\n\r\n                let x = 0 | (LINE_LENGTH/2+30 * D * (cp * h * cB - t * sB)),\r\n                    y = 0 | (NUM_LINES/2+15 * D * (cp * h * sB + t * cB)),\r\n                    o = x + LINE_LENGTH * y,\r\n                    N = 0 | (8 * ((st * sA - sp * ct * cA) * cB - sp * ct * sA - st * cA - cp * ct * sB));\r\n                if (y < NUM_LINES && y >= 0 && x >= 0 && x < LINE_LENGTH && D > z[o]) {\r\n                    z[o] = D;\r\n                    b[o] = \".,-~:;=!*#$@\"[N > 0 ? N : 0];\r\n                }\r\n            }\r\n        }\r\n        setb(b.join(\"\"));\r\n        return {A, B}\r\n    };\r\n    React.useEffect(() => {\r\n        wrapper()\r\n    }, []);\r\n    return <pre style={{\r\n        fontFamily:'Courier New, Courier, monospace',\r\n        backgroundColor: background,\r\n        color: text,\r\n        fontSize: '10pt',\r\n        width:LINE_LENGTH*8\r\n    }}>{b}</pre>\r\n};\r\n\r\nexport default Torus\r\n","import React, {useRef, useEffect} from 'react';\r\nimport Torus from './figures/torus'\r\nimport {makeStyles} from '@material-ui/styles'\r\nimport {Typography, Button, ThemeProvider, createMuiTheme} from '@material-ui/core'\r\n\r\nconst HEADER_COLOR = '#FC766A';\r\nconst TEXT_COLOR = '#FC766A';\r\nconst BACKGROUND_COLOR = '#000';\r\n\r\n// const BACKGROUND_COLOR = '#4B84B1';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            // light: will be calculated from palette.primary.main,\r\n            main: HEADER_COLOR,\r\n            // dark: will be calculated from palette.primary.main,\r\n            // contrastText: will be calculated to contrast with palette.primary.main\r\n        }\r\n    }\r\n});\r\n\r\n\r\nfunction Splash() {\r\n    const parentRef = useRef(null);\r\n    const [dimensions, setDimensions] = React.useState({width: window.innerWidth, height: window.innerHeight})\r\n    const updateDimensions = () => setDimensions({height: window.innerHeight, width: window.innerWidth})\r\n    useEffect(() => {\r\n        window.addEventListener('resize', updateDimensions)\r\n        return () => window.removeEventListener('resize', updateDimensions)\r\n    }, []);\r\n\r\n    const useClasses = makeStyles(theme => ({\r\n        App: {\r\n            width: '100%',\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n            overflowY: 'hidden'\r\n        },\r\n        root: {\r\n            ...theme.typography.button,\r\n            backgroundColor: BACKGROUND_COLOR,\r\n            color: TEXT_COLOR,\r\n            padding: theme.spacing(1),\r\n        },\r\n    }));\r\n\r\n    const classes = useClasses()\r\n    // return (\r\n    //   <div className={classes.App} ref={parentRef}>\r\n    //     <Wrapper height={dimensions.height} width={dimensions.width}/>\r\n    //   </div>\r\n    // );\r\n    return (\r\n        <div className={classes.App} ref={parentRef}>\r\n            <div style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                minHeight: dimensions.height,\r\n                minWidth: dimensions.width,\r\n                backgroundColor: BACKGROUND_COLOR,\r\n                justifyContent: 'center'\r\n            }}>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\r\n                    <Typography variant={'h3'} style={{\r\n                        fontWeight:600,\r\n                        color: HEADER_COLOR, '-webkit-font-smoothing': 'antialiased',\r\n                        '-moz-osx-font-smoothing': 'grayscale'\r\n                    }}>WORK SHOULD BE ART</Typography>\r\n                    <Torus background={BACKGROUND_COLOR} text={TEXT_COLOR}/>\r\n                    <ThemeProvider theme={theme}>\r\n                        <Button variant={'outlined'} color={'primary'}>See My Work</Button>\r\n                    </ThemeProvider>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Splash;\r\n","import React from 'react';\nimport Splash from './routing/splash/splash'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                {/*switch matches first, so put content above default*/}\n                <Route path=\"/*\">\n                    <Splash/>\n                </Route>\n            </Switch>\n        </Router>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    overrides: {\n        MuiCssBaseline: {\n            '@global': {\n                '*': {\n                    'scrollbar-width': 'thin',\n                    'scrollbar-color': 'grey transparent',\n                },\n                'body::-webkit-scrollbar': {\n                    'background-color': 'fff',\n                    width: '16px',\n\n                },\n\n                /* background of the scrollbar except button or resizer */\n                'body::-webkit-scrollbar-track': {\n                    'background-color': '#fff',\n                },\n\n                /* scrollbar itself */\n                'body::-webkit-scrollbar-thumb': {\n                    'background-color': '#babac0',\n                    'border-radius': '16px',\n                    'border': '4px solid #fff',\n                },\n\n                /* set button(top and bottom of the scrollbar) */\n                'body::-webkit-scrollbar-button': {\n                    display: 'none'\n                }\n            },\n        },\n    },\n});\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Fragment>\n            <ThemeProvider theme={theme}>\n                <CssBaseline/>\n                <App/>\n            </ThemeProvider>\n        </Fragment>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}