{"version":3,"sources":["routing/splash/torus.js","routing/splash/underlay.js","routing/splash/splash.js","App.js","serviceWorker.js","index.js"],"names":["Torus","Component","React","useState","b","setb","asciiframe","A","B","z","cA","Math","cos","sA","sin","cB","sB","k","NUM_LINES","LINE_LENGTH","j","ct","st","i","sp","cp","h","D","t","x","y","o","N","join","useEffect","params","setInterval","wrapper","style","fontFamily","backgroundColor","color","fontSize","useClasses","makeStyles","theme","App","width","height","overflow","overflowY","Splash","parentRef","useRef","window","innerWidth","innerHeight","setDimensions","updateDimensions","addEventListener","removeEventListener","classes","className","ref","path","Boolean","location","hostname","match","createMuiTheme","overrides","MuiCssBaseline","display","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f5aaad63.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Torus = () => {\r\n    const [b, setb] = React.useState(\"\");\r\n    const wrapper = ()=>{\r\n        let params = {A:1, B:1};\r\n        setInterval(()=>{\r\n            params=asciiframe(params)\r\n        }, 50)\r\n    };\r\n    let asciiframe = ({A, B}) => {\r\n        let b = [];\r\n        let z = [];\r\n        A+= 0.07;\r\n        B += 0.03;\r\n        let cA = Math.cos(A), sA = Math.sin(A),\r\n            cB = Math.cos(B), sB = Math.sin(B);\r\n        const LINE_LENGTH = 80;\r\n        const NUM_LINES = 24;\r\n        for (let k = 0; k < NUM_LINES*LINE_LENGTH; k++) {\r\n            b[k] = (k % LINE_LENGTH) === LINE_LENGTH-1 ? \"\\n\" : \" \";//initialize with spaces and rows of size 80, 22 rows\r\n            z[k] = 0;\r\n        }\r\n        for (let j = 0; j < 6.28; j += 0.07) { // j <=> theta\r\n            let ct = Math.cos(j), st = Math.sin(j);\r\n            for (let i = 0; i < 6.28; i += 0.02) {   // i <=> phi\r\n                let sp = Math.sin(i), cp = Math.cos(i),\r\n                    h = ct + 2, // R1 + R2*cos(theta)\r\n                    D = 1 / (sp * h * sA + st * cA + 5), // this is 1/z\r\n                    t = sp * h * cA - st * sA; // this is a clever factoring of some of the terms in x' and y'\r\n\r\n                let x = 0 | (40 + 30 * D * (cp * h * cB - t * sB)),\r\n                    y = 0 | (12 + 15 * D * (cp * h * sB + t * cB)),\r\n                    o = x + 80 * y,\r\n                    N = 0 | (8 * ((st * sA - sp * ct * cA) * cB - sp * ct * sA - st * cA - cp * ct * sB));\r\n                if (y < 22 && y >= 0 && x >= 0 && x < 79 && D > z[o]) {\r\n                    z[o] = D;\r\n                    b[o] = \".,-~:;=!*#$@\"[N > 0 ? N : 0];\r\n                }\r\n            }\r\n        }\r\n        setb(b.join(\"\"));\r\n        return {A, B}\r\n    };\r\n    React.useEffect(() => {\r\n        wrapper()\r\n    }, []);\r\n    return <pre style={{\r\n        fontFamily:'Courier New, Courier, monospace',\r\n        backgroundColor: '#000',\r\n        color: '#ccc',\r\n        fontSize: '10pt'\r\n    }}>{b}</pre>\r\n};\r\n\r\nexport default Torus\r\n","import React, {Component} from 'react'\r\nimport { range} from 'd3-array'\r\nimport {select} from 'd3-selection'\r\nimport {geoPath} from 'd3-geo'\r\nimport {contours} from 'd3-contour'\r\n\r\nclass Underlay extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.createBarChart = this.createBarChart.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.createBarChart()\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.createBarChart()\r\n    }\r\n\r\n    createBarChart() {\r\n        const {width, height, points} = this.props\r\n        const thresholds = range(1, 40).map(i => Math.pow(1.2, i))\r\n        const logisticCurve = (x) => {\r\n            return 1200 / (1 + Math.exp(-.001 * (x - 600)))\r\n        }\r\n        //const thresholds = range(1, 1200).map(i => logisticCurve(i))\r\n\r\n\r\n        const value = (x, y) => {\r\n            let total = 0\r\n            points.forEach(point => {\r\n                let distance = Math.sqrt((x - point.x) ** 2 + (y - point.y) ** 2)\r\n                if (distance < 0.1) {\r\n                    distance = 0.1\r\n                }\r\n                total += 1 / (distance ^ 2) * point.q * 10000\r\n            })\r\n            return total\r\n        }\r\n\r\n        const q = 5; // The level of detail, e.g., sample every 4 pixels in x and y.\r\n        const x0 = -q / 2, x1 = width + q;\r\n        const y0 = -q / 2, y1 = height + q;\r\n        const n = Math.ceil((x1 - x0) / q);\r\n        const m = Math.ceil((y1 - y0) / q);\r\n        const grid = new Array(n * m);\r\n        for (let j = 0; j < m; ++j) {\r\n            for (let i = 0; i < n; ++i) {\r\n                grid[j * n + i] = value(i * q + x0, j * q + y0);\r\n            }\r\n        }\r\n        grid.x = -q;\r\n        grid.y = -q;\r\n        grid.k = q;\r\n        grid.n = n;\r\n        grid.m = m;\r\n\r\n        const transform = ({type, value, coordinates}) => {\r\n            return {\r\n                type, value, coordinates: coordinates.map(rings => {\r\n                    return rings.map(points => {\r\n                        return points.map(([x, y]) => ([\r\n                            grid.x + grid.k * x,\r\n                            grid.y + grid.k * y\r\n                        ]));\r\n                    });\r\n                })\r\n            };\r\n        }\r\n        const _contours = contours()\r\n            .size([grid.n, grid.m])\r\n            .thresholds(thresholds)\r\n            (grid)\r\n            .map(transform)\r\n        const node = this.node\r\n        const svg = select(node);\r\n        svg.selectAll('*').remove();\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"fill\", \"none\")\r\n            .selectAll(\"path\")\r\n            .data(_contours)\r\n            .join(\"path\")\r\n            .attr(\"fill\", (d, i) => i % 2 ? '#808080' : '#000000')\r\n            .attr(\"d\", geoPath());\r\n        svg.append(\"rect\")\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .attr(\"fill\", '#000000')\r\n            .attr(\"fill-opacity\", .6)\r\n        svg.append(\"text\")\r\n    }\r\n\r\n\r\n    render() {\r\n        return <svg ref={node => this.node = node} height={this.props.height} width={this.props.width}\r\n                    style={{overflow: 'hidden'}}/>\r\n    }\r\n}\r\n\r\n\r\nexport default Underlay\r\n\r\nconst Wrapper = (props) => {\r\n    let {width, height} = props\r\n    width*=.5\r\n    height*=.5\r\n    const [points, setPoints] = React.useState([{\r\n        x: Math.random() * width+.5*width,\r\n        y: Math.random() * height+.5*height,\r\n        q: 1\r\n    }, {x: Math.random() * width+.5*width, y: Math.random() * height+.5*height, q: 3}, {\r\n        x: Math.random() * width+.5*width,\r\n        y: Math.random() * height+.5*height,\r\n        q: 2\r\n    }])\r\n    const incrementPoints = () => {\r\n        setPoints(points.map(point => {\r\n            let x = point.x + (Math.random() - .5) * .01 * width\r\n            let y = point.y + (Math.random() - .5) * .01 * height\r\n            if (x < 0) {\r\n                x = 0\r\n            }\r\n            if (x > width) {\r\n                x = width\r\n            }\r\n            if (y < 0) {\r\n                y = 0\r\n            }\r\n            if (y > height) {\r\n                y = height\r\n            }\r\n            return {x, y, q: point.q}\r\n        }))\r\n    }\r\n    React.useEffect(() => {\r\n        const interval = setInterval(incrementPoints, 50)\r\n        return () => clearInterval(interval)\r\n    }, [])\r\n\r\n    return (\r\n        <Underlay {...props} points={points}/>\r\n    )\r\n}\r\n\r\nexport {Wrapper}","import React, {useRef, useEffect} from 'react';\r\nimport {Wrapper} from \"./underlay\";\r\nimport Torus from './torus'\r\nimport {makeStyles} from '@material-ui/styles'\r\n\r\nconst useClasses = makeStyles(theme => ({\r\n    App:{\r\n        width:'100%',\r\n        height:'100%',\r\n        overflow:'hidden',\r\n        overflowY:'hidden'\r\n    }\r\n}))\r\n\r\nfunction Splash() {\r\n    const parentRef   = useRef(null);\r\n    const [dimensions, setDimensions] = React.useState({width:window.innerWidth, height:window.innerHeight})\r\n    const updateDimensions=()=>setDimensions({height:window.innerHeight, width:window.innerWidth})\r\n    useEffect ( () => {\r\n        window.addEventListener('resize', updateDimensions)\r\n        return ()=>window.removeEventListener('resize', updateDimensions)\r\n    }, []);\r\n    const classes = useClasses()\r\n  // return (\r\n  //   <div className={classes.App} ref={parentRef}>\r\n  //     <Wrapper height={dimensions.height} width={dimensions.width}/>\r\n  //   </div>\r\n  // );\r\n      return (\r\n    <div className={classes.App} ref={parentRef}>\r\n     <Torus/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Splash;\r\n","import React from 'react';\nimport Splash from './routing/splash/splash'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                {/*switch matches first, so put content above default*/}\n                <Route path=\"/*\">\n                    <Splash/>\n                </Route>\n            </Switch>\n        </Router>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    overrides: {\n        MuiCssBaseline: {\n            '@global': {\n                '*': {\n                    'scrollbar-width': 'thin',\n                    'scrollbar-color': 'grey transparent',\n                },\n                'body::-webkit-scrollbar': {\n                    'background-color': 'fff',\n                    width: '16px',\n\n                },\n\n                /* background of the scrollbar except button or resizer */\n                'body::-webkit-scrollbar-track': {\n                    'background-color': '#fff',\n                },\n\n                /* scrollbar itself */\n                'body::-webkit-scrollbar-thumb': {\n                    'background-color': '#babac0',\n                    'border-radius': '16px',\n                    'border': '4px solid #fff',\n                },\n\n                /* set button(top and bottom of the scrollbar) */\n                'body::-webkit-scrollbar-button': {\n                    display: 'none'\n                }\n            },\n        },\n    },\n});\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Fragment>\n            <ThemeProvider theme={theme}>\n                <CssBaseline/>\n                <App/>\n            </ThemeProvider>\n        </Fragment>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}